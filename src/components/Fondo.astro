---

---
      <div class="gradient-bg">
        <svg class="noise">
            <filter id='noiseFilter'>
              <feTurbulence 
                type='fractalNoise' 
                baseFrequency='0.6' 
                stitchTiles='stitch'/>
               <feColorMatrix in="colorNoise" type="matrix" values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0" />
                  <feComposite operator="in" in2="SourceGraphic" result="monoNoise"/>
                  <feBlend in="SourceGraphic" in2="monoNoise" mode="screen" />
            </filter>
            
          </svg>
    
        <svg xmlns="http://www.w3.org/2000/svg">
          <defs>
            <filter id="goo">
              <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
              <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
              <feBlend in="SourceGraphic" in2="goo" />
            </filter>
          </defs>
        </svg>
        <div class="gradients-container">
          <div class="g1"></div>
          <div class="g2"></div>
          <div class="g3"></div>
          <div class="g4"></div>
          <div class="g5"></div>
          <div class="interactive"></div>
        </div>
      </div>
  <!-- <script>document.addEventListener('DOMContentLoaded', () => {
    const interBubble = document.querySelector<HTMLDivElement>('.interactive')!;
    let curX = 0;
    let curY = 0;
    let tgX = 0;
    let tgY = 0;

    function move() {
        curX += (tgX - curX) / 20;
        curY += (tgY - curY) / 20;
        interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
        requestAnimationFrame(() => {
            move();
        });
    }

    window.addEventListener('mousemove', (event) => {
        tgX = event.clientX;
        tgY = event.clientY;
    });

    move();
});</script> -->

<style>
    :root {
  --color-bg1: #cdcdcd;
  --color-bg2: #cdcdcd;
  --color1: 18, 113, 255;
  --color2: 221, 74, 255;
  --color3: 100, 220, 255;
  --color4: 200, 50, 50;
  --color5: 180, 180, 50;
  --color-interactive: 140, 100, 255;
  --circle-size: 100vh;
  --blending: hard-light;
}

@keyframes moveInCircle {
  0% {
    width: 200%;
  }
  50% {
   height: 120%;
  }
  100% {
    width: 100%;
  }
}

@keyframes moveVertical {
  0% {
    transform: scale(2);
  }
  50% {
    transform: scale(1);
  }
  100% {
    transform: scale(2);
  }
}

@keyframes moveHorizontal {
  0% {
    transform: scale(2);
  }
  50% {
    transform: scale(1);
  }
  100% {
    transform: scale(2);
  }
}


.gradient-bg {
  width: 100vw;
  height: 100vh;
  position: absolute;
  z-index: -2;
  overflow: hidden;
  background: linear-gradient(40deg, var(--color-bg1), var(--color-bg2));
  top: 0;
  left: 0;

  svg {
    display: none;
  }


  .gradients-container {
    filter: url(#goo) blur(40px) url(#noiseFilter);
    width: 100%;
    height: 100%;
  }

  .g1 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color1), 0.8) 0, rgba(var(--color1), 0) 200%);
    mix-blend-mode: var(--blending);
    height: 100vh;
    width: 20vw;
    left: 0;

    transform-origin: center center;
    animation: moveVertical 30s ease infinite;

    opacity: 1;
  }

  .g2 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color2), 0.8) 0, rgba(var(--color2), 0) 200%) no-repeat;
    mix-blend-mode: var(--blending);
    height: 100vh;
    width: 20vw;
    left: 20vw;

    transform-origin: calc(50% - 400px);
    animation: moveInCircle 1s reverse infinite;

    opacity: 1;
     /* display: none; */
  }

  .g3 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color3), 0.8) 0, rgba(var(--color3), 0) 200%) no-repeat;
    mix-blend-mode: var(--blending);
    width: 20vw;
    height: 100vh;
    left: 80vh;
    animation: moveInCircle 1s linear infinite;

    opacity: 1;
    /* display: none; */

  }

  .g4 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color4), 0.8) 0, rgba(var(--color4), 0) 200%) no-repeat;
    mix-blend-mode: var(--blending);

    width: 20vw;
    height: 100vh;
    left: 60vw;

    transform-origin: calc(50% - 200px);
    animation: moveHorizontal 40s ease infinite;

    opacity: 1;

  }

  .g5 {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color5), 0.8) 0, rgba(var(--color5), 0) 200%) no-repeat;
    mix-blend-mode: var(--blending);

    width: 20vw;
    height: 100%;
    left: 80vw;

    transform-origin: calc(50% - 800px) calc(50% + 200px);
    animation: moveInCircle 1s ease infinite;

    opacity: 1;

  }

  .interactive {
    position: absolute;
    background: radial-gradient(circle at center, rgba(var(--color-interactive), 0.8) 0, rgba(var(--color-interactive), 0) 50%) no-repeat;
    mix-blend-mode: var(--blending);

    width: 100%;
    height: 100%;
    top: -50%;
    left: -50%;

    opacity: 0.7;
  }
}
    :root {
  --bg: #efefef;
  --text: #151515;
  --yellow: #EDB74D;
  --red: #EB6666;
  --green: #6FB18A; 
}


body::before,
body::after {
  position: absolute;
  left: 0;
  top: 0;
  content: '';
  width: 100%;
  height: 100%;
  z-index: -1;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  opacity: 40%;
}

body::before {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  background: #c3c3c3;
  filter: url(#noiseFilter);
  width: 100vw;
  min-width: 100vw;
}


/* Blobs */
.blob-cont {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: -1;
  height: 500px;
  width: 500px;
  position: relative;
  right: 5em;
}




</style>