---
import Fondo from "../components/Fondo.astro";

import Layout from "../layouts/Layout.astro";
---
<body>
    <div class="gradient-bg">
        <svg class="noise">
            <filter id='noiseFilter'>
              <feTurbulence 
                type='fractalNoise' 
                baseFrequency='0.6' 
                stitchTiles='stitch'/>
               <feColorMatrix in="colorNoise" type="matrix" values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0" />
                  <feComposite operator="in" in2="SourceGraphic" result="monoNoise"/>
                  <feBlend in="SourceGraphic" in2="monoNoise" mode="screen" />
            </filter>
          </svg>
    
        <svg xmlns="http://www.w3.org/2000/svg">
          <defs>
            <filter id="goo">
              <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
              <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
              <feBlend in="SourceGraphic" in2="goo" />
            </filter>
          </defs>
        </svg>
        <div class="gradients-container">
          <div class="g1"></div>
          <div class="g2"></div>
          <div class="g3"></div>
          <div class="g4"></div>
          <div class="g5"></div>
          <div class="interactive"></div>
        </div>
      </div>
      <slot /> 
  <script>document.addEventListener('DOMContentLoaded', () => {
    const interBubble = document.querySelector<HTMLDivElement>('.interactive')!;
    let curX = 0;
    let curY = 0;
    let tgX = 0;
    let tgY = 0;

    function move() {
        curX += (tgX - curX) / 20;
        curY += (tgY - curY) / 20;
        interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
        requestAnimationFrame(() => {
            move();
        });
    }

    window.addEventListener('mousemove', (event) => {
        tgX = event.clientX;
        tgY = event.clientY;
    });

    move();
});</script>
    
</body>
</html>
<style>

:root {
--color-bg1: #a19c9c;
--color-bg2: #bc3a70;
--color1: 18, 113, 255;
--color2: 221, 74, 255;
--color3: 100, 220, 255;
--color4: 200, 50, 50;
--color5: 180, 180, 50;
--color-interactive: 140, 100, 255;
--circle-size: 150%;
--blending: hard-light;
}

@keyframes moveInCircle {
0% {
transform: rotate(0deg);
}
50% {
transform: rotate(180deg);
}
100% {
transform: rotate(360deg);
}
}

@keyframes moveVertical {
0% {
transform: translateY(-50%);
}
50% {
transform: translateY(50%);
}
100% {
transform: translateY(-50%);
}
}

@keyframes moveHorizontal {
0% {
transform: translateX(-50%) translateY(-10%);
}
50% {
transform: translateX(50%) translateY(10%);
}
100% {
transform: translateX(-50%) translateY(-10%);
}
}


.gradient-bg {
width: 100vw;
height: 100%;
position: absolute;
z-index: -2;
overflow: hidden;
background: linear-gradient(40deg, var(--color-bg1), var(--color-bg2));
/* filter: url(noiseFilter); */
top: 0;
left: 0;

svg {
display: none;
}


.gradients-container {
filter: url(#goo) blur(100px) url(#noiseFilter);
width: 100vw;
height: 100%;
}

.g1 {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color1), 0.8) 0, rgba(var(--color1), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);

width: var(--circle-size);
height: var(--circle-size);
top: calc(50% - var(--circle-size) / 2);
left: calc(50% - var(--circle-size) / 2);

transform-origin: center center;
animation: moveVertical 20s ease infinite;

opacity: 1;
}

.g2 {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color2), 0.8) 0, rgba(var(--color2), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);

width: var(--circle-size);
height: var(--circle-size);
top: calc(50% - var(--circle-size) / 2);
left: calc(50% - var(--circle-size) / 2);

transform-origin: calc(50% - 400px);
animation: moveInCircle 10s reverse infinite;

opacity: 1;
}

.g3 {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color3), 0.8) 0, rgba(var(--color3), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);

width: var(--circle-size);
height: var(--circle-size);
top: calc(50% - var(--circle-size) / 2 + 200px);
left: calc(50% - var(--circle-size) / 2 - 500px);

transform-origin: calc(50% + 400px);
animation: moveInCircle 20s linear infinite;

opacity: 1;
}

.g4 {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color4), 0.8) 0, rgba(var(--color4), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);

width: var(--circle-size);
height: var(--circle-size);
top: calc(50% - var(--circle-size) / 2);
left: calc(50% - var(--circle-size) / 2);

transform-origin: calc(50% - 200px);
animation: moveHorizontal 6s ease infinite;

opacity: 1;
}

.g5 {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color5), 0.8) 0, rgba(var(--color5), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);

width: calc(var(--circle-size) * 2);
height: calc(var(--circle-size) * 2);
top: calc(50% - var(--circle-size));
left: calc(50% - var(--circle-size));

transform-origin: calc(50% - 800px) calc(50% + 200px);
animation: moveInCircle 10s ease infinite;

opacity: 1;
}

.interactive {
position: absolute;
background: radial-gradient(circle at center, rgba(var(--color-interactive), 0.8) 0, rgba(var(--color-interactive), 0) 50%) no-repeat;
mix-blend-mode: var(--blending);
width: 100%;
height: 100%;
top: -50%;
left: -50%;
opacity: 0.7;
}
}
:root {
--bg: #efefef;
--text: #151515;
--yellow: #EDB74D;
--red: #EB6666;
--green: #6FB18A; 
}


body::before,
body::after {
position: absolute;
left: 0;
top: 0;
content: '';
width: 100%;
height: 100%;
z-index: -1;
box-sizing: border-box;
margin: 0;
padding: 0;
opacity: 40%;
}

body::before {
box-sizing: border-box;
margin: 0;
padding: 0;
background: transparent;
filter: url(#noiseFilter);
width: 100vw;
min-width: 100vw;
}


/* Blobs */
.blob-cont {
display: flex;
flex-direction: column;
justify-content: center;
align-items: center;
z-index: -1;
height: 500px;
width: 500px;
position: relative;
right: 5em;
}

</style>